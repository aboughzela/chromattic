= The {{code}}@PrimaryType{{/code}} annotation =

The {{code}}org.chromattic.api.annotations.PrimaryType{{/code}} annotation creates a unique correspondance between
a Java class and a JCR primary node type. The mapping between an annotated class and the primary type must be unique for
the JCR node type, therefore it is not possible to have the same node type mapped to more than one class inside the same
Chromattic application.

= Mapping properties =

Class properties are naturally mapped to JCR node properties via the {{code}}org.chromattic.api.annotations.Property{{/code}}
annotation.

A JCR property can be either single valued or multi valued depending on its definition and we are able to support
both kinds in Chromattic. There is also the capability to map a single valued property to a multi valued property, wether
it is a class or a JCR property.

Finally we will detail the various JCR property value types and their corresponding Java types.

We will study several styles of property mapping.

== Property type mapping ==

=== Variable length types ===

JCR provides two types to map variable length data.

* The JCR string type is mapped to the Java {{code}}java.lang.String{{/code}} type.
* The JCR binary type is mapped to the Java {{code}}java.io.InputStream{{/code}} type.

{{note}}In a future revision, it could be interesting to map the binary type to a java byte array.{{/note}}

=== Primitive types ===

The types {{code}}BOOLEAN{{/code}}, {{code}}LONG{{/code}} and {{code}}DOUBLE{{/code}} are supported by JCR
and can be mapped to Java primitive types.

* The JCR {{code}}BOOLEAN{{/code}} type is mapped to the Java boolean type
* The JCR {{code}}LONG{{/code}} type is mapped to either the Java int or long type
* The JCR {{code}}DOUBLE{{/code}} type is mapped to either the Java double or float type

For each of those types, there is the choice between the corresponding Java primitive type or Java wrapper type.

=== Temporal type ===

JCR exposes the {{code}}java.util.Calendar{{/code}} type but is called {{code}}DATE{{/code}}, {{code}}Calendar{{/code}} is just the
type that JCR exposes to manipulate dates. Chromattic uses the {{code}}java.util.Date{{/code}} type.

== Property mapping ==

The {{code}}org.chromattic.api.annotations.Property{{/code}} annotation binds an object to a node property. Our
{{code}}Page{{/code}} shows several examples of property mapping using the {{code}}@Property{{/code}} annotation.
This annotation has a mandatory {{code}}name{{/code}} parameter to provide the name of the corresponding JCR
property. 

{{java}}
{@javadoc org.chromattic.docs.reference.primarytypemapping.Page#getTitle()}
{@include org.chromattic.docs.reference.primarytypemapping.Page#getTitle()}

{@javadoc org.chromattic.docs.reference.primarytypemapping.Page#setTitle(java.lang.String)}
{@include org.chromattic.docs.reference.primarytypemapping.Page#setTitle(java.lang.String)}

{@javadoc org.chromattic.docs.reference.primarytypemapping.Page#getLastModifiedDate()}
{@include org.chromattic.docs.reference.primarytypemapping.Page#getLastModifiedDate()}

{@javadoc org.chromattic.docs.reference.primarytypemapping.Page#setLastModifiedDate(java.util.Date)}
{@include org.chromattic.docs.reference.primarytypemapping.Page#setLastModifiedDate(java.util.Date)}

{@javadoc org.chromattic.docs.reference.primarytypemapping.Page#getTags()}
{@include org.chromattic.docs.reference.primarytypemapping.Page#getTags()}
{{/java}}

We show here a quick overview of various mapping styles:

* The title property maps a single valued Java string to a single valued JCR string
* The last modified date property maps a single valued Java date to a single valued JCR date
* The tags property maps a multi valued string to a multi valued JCR string

== Single valued property mapping ==

The most common mapping style between a single valued class and node property. The object property must
provide at least a setter method or a getter method, probably both in most use cases, those methods must
use the same java property type. The {{code}}Page{{/code}} title property is the perfect example:

{{java}}
{@include org.chromattic.docs.reference.primarytypemapping.Page#getTitle()}
{@include org.chromattic.docs.reference.primarytypemapping.Page#setTitle(java.lang.String)}
{{/java}}

The corresponding JCR node defines a corresponding title property with the string type:

{{xml indent=2}}
<propertyDefinition name="title" requiredType="STRING" autoCreated="false" mandatory="false" onParentVersion="COPY"
protected="false" multiple="false">
  <valueConstraints />
</propertyDefinition>
{{/xml}}

The property getter method returns the JCR property value. If the property does not exist, the null value is returned
when the java property type is not a primitive type. Sometimes it can happen that the JCR property does not exist
but this property is mapped to a primitive type. When the situation occurs Chromattic throws a {{code}}NullPointerException{{/code}},
that behavior is similar to what happens when a null value is unboxed to its corresponding primitive type.

The property setter method updates the JCR property value when it is invoked. For non primitive type it is possible to
remove the property by providing a null argument.

== Multi valued property mapping ==

JCR naturally provide support for multi valued properties, so does Chromattic. Chromattic gives you the choice
to use either arrays or collections to access data. Primitive arrays can be used when the type mapping allows it.

When a list of values is returned by a getter method, any modification to this list is only visible to this list and
does not affect the JCR property values. When the JCR property does not exist, a null value is returned to the caller.

To update the values of a JCR property, the property setter has to be invoked. The list of values is read once and
copied to the corresponding JCR property. If the list is null, it simply delete the property.

== Mixed mapping ==

It can be convenient to map a single valued property to a multi valued property. For instance a multi valued JCR
 property exposed as a single valued property provides access to the first value of the values.

|                  |JCR single valued|JCR multi valued
|Java single valued|trivial mapping  |access the first element
|Java multi valued |a list of size 1 |trivial mapping

The same multi valued JCR property can be exposed both as a single and multi valued property. The multi valued property
gives access to the complete list of values and the single valued property is useful when the first value needs to be
accessed.

= Mapping parent child relationships =