The hierarchical tree structure supported by JCR is the default way to organize data. JCR provides a reference mechanism
for relationship between nodes, a node has a pointer to target node via a property. The relationship is based on two specific
property types:

* The ##REFERENCE## property type references a target node using its UUID.
* The ##PATH## property type references a target node using its path.

The single kind of relationship supported by reference is one-to-many/many-to-one: a node references a target node and
a node can be the target of multiple nodes.

{{note}}Technically it should be possible to support many-to-many relationship using a multivalued reference property.
This feature could be implemented in the future.{{/note}}

= One-to-many/many-to-one reference relationship mapping =

Mapping single valued reference properties to Chromattic relationship relationship relies on Java collections, in a similar
 manner hierarchical [[one-to-many/many-to-one relationship>>#hierarchical_onetomany_section]] does.

The ##@OneToMany## and ##@ManyToOne## annotations declares the relationship, however as it is not a hierarchical parent child
relationship, the type of the annotation must be set to ##RelatonshipType.REFERENCE##.

The ##Page## object has a reference to a ##Content## object. The ##@ManyToOne(type = RelationshipType.REFERENCE)##
annotation on the   //content// property of ##Page## object declares the relationship from the ##Page## side.

{{example}}
{{java}}
{@javadoc org.chromattic.docs.reference.website.Page#getContent()}
{@include org.chromattic.docs.reference.website.Page#getContent()}

{@javadoc org.chromattic.docs.reference.website.Page#setContent(org.chromattic.docs.reference.website.Content)}
{@include org.chromattic.docs.reference.website.Page#setContent(org.chromattic.docs.reference.website.Content)}
{{/java}}
{{/example}}

Conversely the ##Content## object owns a collection of ##Page## objects, each of those having a reference pointing to this object.
The ###OneToMany(type = RelationshipType.REFERENCE)## annotation on the //pages// property declares the relationship from the
##Content## side. Unlike the [[one-to-many>>#hierarchical_onetomany_section]] relationship, the only possible type of collection
is the ##java.util.Collection## interface because there isn't any notion of order, not name in such relationship.

{{example}}
{{java}}
{@javadoc org.chromattic.docs.reference.website.Content#getPages()}
{@include org.chromattic.docs.reference.website.Content#getPages()}
{{/java}}
{{/example}}

Again here, the relationship between two objects is established when a ##Page## object is added to the pages collection of a
##Content## object or when a ##Content## object is set by invoking the ##setContent(Content content)## method on the ##Page##
object.

= One-to-many/many-to-one path relationship mapping =

/todo
/todo
